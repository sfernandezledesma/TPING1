Object subclass: #Balance	instanceVariableNames: 'totalMoney'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Balance commentStamp: '<historical>' prior: 0!I am a balance sheet. !!Balance methodsFor: 'checking' stamp: 'PedroRodriguez 5/5/2017 11:29'!checkNotNegative: moneyLeft.		moneyLeft < 0 ifTrue: [ ^(Error signal: 'not enough money') ].! !!Balance methodsFor: 'private' stamp: 'PedroRodriguez 4/13/2017 19:45'!initializeWith: anAmountOfMoney	"comment stating purpose of message"	totalMoney := anAmountOfMoney! !!Balance methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 20:44'!add: anAmountOfDollars	"comment stating purpose of message"	anAmountOfDollars < 0 ifTrue: [ ^(Error signal: 'cannot add a negative amount of money') ].	totalMoney := totalMoney + anAmountOfDollars.	^totalMoney! !!Balance methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/5/2017 11:28'!subtract: anAmountOfDollars	"comment stating purpose of message"	| moneyLeft |	moneyLeft := totalMoney - anAmountOfDollars.	self checkNotNegative: moneyLeft.	totalMoney := moneyLeft.	^totalMoney! !!Balance methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 20:46'!canSpend: anAmountOfDollars	"comment stating purpose of message"	| moneyLeft |	moneyLeft := totalMoney - anAmountOfDollars.	moneyLeft < 0 ifTrue: [ ^false ] ifFalse: [ ^true ].! !!Balance methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 22:56'!totalMoney	"comment stating purpose of message"	^totalMoney! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Balance class	instanceVariableNames: ''!!Balance class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 19:45'!initializeWith: anAmountOfMoney	"comment stating purpose of message"	^self new initializeWith: anAmountOfMoney! !Object subclass: #Condition	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Condition commentStamp: '<historical>' prior: 0!I decide when the explotation of an oilfield should finish!!Condition methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 15:00'!check: aCondition in: anOilfield	^ self subclassResponsibility! !Condition subclass: #ConditionOnDays	instanceVariableNames: 'maximumDays'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!ConditionOnDays commentStamp: '<historical>' prior: 0!I condition the ending of an oilfield explotation, depending on the number of days the explotations takes!!ConditionOnDays methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 14:57'!check: anOilfield in: aSimulation	^ aSimulation daysSimulated < maximumDays! !!ConditionOnDays methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 15:00'!maximumDays: anAmountOfDays	maximumDays := anAmountOfDays! !Condition subclass: #ConditionOnPercentageOfPetrol	instanceVariableNames: 'minThreshold'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!ConditionOnPercentageOfPetrol commentStamp: '<historical>' prior: 0!i condition on the percentage of petrol of the oilfield!!ConditionOnPercentageOfPetrol methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/17/2017 11:03'!check: anOilfield in: aSimulation	^ anOilfield percentageOfPetrol >= minThreshold! !!ConditionOnPercentageOfPetrol methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/30/2017 21:49'!minThreshold: aPercentageOfPetrol	minThreshold := aPercentageOfPetrol! !Condition subclass: #ConditionOnTotalMoneyLeft	instanceVariableNames: 'minimumTotalMoneyLeft'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!ConditionOnTotalMoneyLeft commentStamp: '<historical>' prior: 0!I condition on the max number of days to simulate!!ConditionOnTotalMoneyLeft methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 15:01'!minimumTotalMoneyLeft: aNumberOfDollars	"comment stating purpose of message"	minimumTotalMoneyLeft := aNumberOfDollars! !!ConditionOnTotalMoneyLeft methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 16:07'!check: anOilfield in: aSimulation	^ anOilfield balanceSheet totalMoney >= minimumTotalMoneyLeft.! !Object subclass: #Oilfield	instanceVariableNames: 'parcels originalVolume petrolVolume waterVolume gasVolume balanceSheet processingPlants alpha1 alpha2 anExtractionHappenedToday globalVolumeExtracted tanks aReinjectionHappenedToday logger'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Oilfield commentStamp: '<historical>' prior: 0!I am an oilfield. I am composed of several parcels. !!Oilfield methodsFor: 'checking' stamp: 'PedroRodriguez 5/5/2017 11:33'!checkEnoughMoneyForSpending: anAmountOfDollars	"comment stating purpose of message"		(self balanceSheet canSpend: anAmountOfDollars)		ifFalse: [ ^(Error signal: 'not enough money') ].! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 5/5/2017 12:13'!activeWells	"comment stating purpose of message"	| activeWells |	activeWells := Set new.	self parcels do: [ :each | each hasWell ifTrue: [ 			each well isOpen ifTrue: [ activeWells add: each ]	 		] 	].	^activeWells  ! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 5/5/2017 11:40'!numberOfRigs	"comment stating purpose of message"	| numberOfRigs |	numberOfRigs := 0.	self parcels do: [ :eachParcel | 		eachParcel rigs do: [ :eachRig |			numberOfRigs := numberOfRigs + 1		]	].		^numberOfRigs! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 5/17/2017 10:32'!anExtractionHappenedToday	^anExtractionHappenedToday! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 23:49'!parcels	"comment stating purpose of message"	^parcels! !!Oilfield methodsFor: 'accessing' stamp: 'sfernandezledesma 5/31/2017 21:58'!aReinjectionHappenedToday	^aReinjectionHappenedToday! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 21:30'!balanceSheet	"comment stating purpose of message"	^balanceSheet ! !!Oilfield methodsFor: 'accessing' stamp: 'sfernandezledesma 5/30/2017 18:48'!tanks	"comment stating purpose of message"	^tanks ! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/21/2017 12:06'!percentageOfWater	"comment stating purpose of message"	^waterVolume / (petrolVolume + waterVolume + gasVolume)! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/16/2017 10:33'!petrolVolume	"comment stating purpose of message"	^petrolVolume ! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 5/5/2017 12:13'!numberOfActiveWells	"comment stating purpose of message"	| numberOfActiveWells |	numberOfActiveWells := 0.	self parcels collect: [ :each | each hasWell ifTrue: [ 			each well isOpen ifTrue: [ numberOfActiveWells := numberOfActiveWells + 1 ]	 		] 	].	^numberOfActiveWells ! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/18/2017 15:18'!processingPlants	"comment stating purpose of message"	^processingPlants ! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/16/2017 10:33'!gasVolume	"comment stating purpose of message"	^gasVolume! !!Oilfield methodsFor: 'accessing' stamp: 'sfernandezledesma 5/30/2017 18:48'!gasTanks	"comment stating purpose of message"	^tanks select: [ :each | each isMemberOf: GasTank ]! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/21/2017 12:05'!percentageOfPetrol	"comment stating purpose of message"	^petrolVolume / (petrolVolume + waterVolume + gasVolume)! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/21/2017 12:06'!percentageOfGas	"comment stating purpose of message"	^gasVolume / (petrolVolume + waterVolume + gasVolume)! !!Oilfield methodsFor: 'accessing' stamp: 'PedroRodriguez 4/16/2017 10:33'!waterVolume	"comment stating purpose of message"	^waterVolume ! !!Oilfield methodsFor: 'accessing' stamp: 'sfernandezledesma 5/30/2017 18:48'!waterTanks	"comment stating purpose of message"	^tanks select: [ :each | each isMemberOf: WaterTank ]! !!Oilfield methodsFor: 'accessing' stamp: 'sfernandezledesma 6/3/2017 12:44'!numberOfWells	"comment stating purpose of message"	| totalWells |	totalWells := 0.	parcels do: [ :each | each hasWell ifTrue: [ totalWells := totalWells + 1 ] ].	^totalWells! !!Oilfield methodsFor: 'paying' stamp: 'PedroRodriguez 5/5/2017 11:46'!payDailyConsumptionForRig: aRig	"comment stating purpose of message"	balanceSheet subtract: aRig costDailyConsumption.! !!Oilfield methodsFor: 'paying' stamp: 'PedroRodriguez 5/5/2017 11:47'!payDailyRentFees	"comment stating purpose of message"	parcels collect: [ :eachParcel |		eachParcel rigs do: [ :eachRig | 			(eachRig isActive or: eachRig daysLeftPayingBasicFee > 0) ifTrue: [				balanceSheet subtract: eachRig costRent .			]		]	].! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/5/2017 12:14'!numberOfActiveRigs	"comment stating purpose of message"	| numberOfActiveRigs |	numberOfActiveRigs := 0.	self parcels do: [ :eachParcel | 		eachParcel rigs do: [ :eachRig |			eachRig isActive ifTrue: [ numberOfActiveRigs := numberOfActiveRigs + 1 ]		]	].		^numberOfActiveRigs! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/5/2017 12:14'!potentialVolumeToExtractFrom: aWell	"comment stating purpose of message"	| answer |	aWell isOpen ifFalse: [ ^0 ].	answer := ((alpha1 * (aWell parcel pressure / self numberOfActiveWells)) 					+ ( (alpha2 * (aWell parcel pressure / self numberOfActiveWells) ) ** 2 ))				 min: aWell maxProcessingCapability.						^answer! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/31/2017 21:59'!checkBeforeExtractingThatThereWasntAnyReinjectionToday	"If an extraction happened and a reinjection is about to happen, raise an error"		self aReinjectionHappenedToday ifTrue: [ ^Error signal: 'cannot extract if there was a reinjection in the oilfield that day' ]! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/31/2017 22:04'!reinjectWater: aNumberOfLitresOfWater	self checkBeforeReinjectingThatThereWasntAnyExtractionToday.	aReinjectionHappenedToday := true.	waterVolume := waterVolume + aNumberOfLitresOfWater! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 15:12'!extractProduct: aNumberOfCubicMetresToExtract fromWell: aWell	" depending on the Well, decide how much product is possible to extract from the Well, of all the desired amount  "	" must send the extracted product to a processingPlant. "		| realNumberOfCubicMetresToExtract selected sumOfSelected |	self checkBeforeExtractingThatThereWasntAnyReinjectionToday.	anExtractionHappenedToday := true.		selected := aWell selectProcessingPlantsForExtracting: aNumberOfCubicMetresToExtract.	(selected size = 0)		ifTrue:  [ sumOfSelected := 0 ] 		ifFalse: [ sumOfSelected := (selected collect: [ :each | each capacity ]) sum ].	realNumberOfCubicMetresToExtract := aNumberOfCubicMetresToExtract min: sumOfSelected.		aWell sendToProcessingPlants: realNumberOfCubicMetresToExtract withPercentages: { 		self percentageOfWater . 		self percentageOfGas . 		self percentageOfPetrol  	}.	self extractProduct: realNumberOfCubicMetresToExtract.		self logEvent: realNumberOfCubicMetresToExtract asString, ' cubic metres of product were extracted from Well ', aWell name asString.! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 15:05'!printLog	"Prints on the screen the log"	logger do: [ :each | Transcript show: each; cr ].! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/31/2017 20:09'!checkBeforeReinjectingThatThereWasntAnyExtractionToday	"If an extraction happened and a reinjection is about to happen, raise an error"		self anExtractionHappenedToday ifTrue: [ ^Error signal: 'cannot reinject if there was an extraction from some well that day' ]! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/31/2017 21:55'!advanceOneDay	" update for the following day "	anExtractionHappenedToday := false.	aReinjectionHappenedToday := false.	" pay the rigs fees "	self payDailyRentFees.	" advance the construction of the machines "	self processingPlants do: [ :each | each advanceOneDay ].	self tanks do: [ :each | each advanceOneDay ].	self parcels do: [ :eachParcel |		eachParcel advanceOneDay	].	self processingPlants do: [ :each |		each resetCapacity	].! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/17/2017 09:42'!assignProcessingPlant		Simulator toDo: 'improve the assignation rule for processing plants'.	^processingPlants first.! !!Oilfield methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 14:56'!logEvent: anEventDescription	"comment stating purpose of message"	logger add: anEventDescription.! !!Oilfield methodsFor: 'private' stamp: 'PedroRodriguez 5/5/2017 11:33'!addProcessingPlant: aProcessingPlant	"comment stating purpose of message"		self checkEnoughMoneyForSpending: (aProcessingPlant cost).	self balanceSheet subtract: (aProcessingPlant cost).	processingPlants add: aProcessingPlant ! !!Oilfield methodsFor: 'private' stamp: 'sfernandezledesma 6/3/2017 14:55'!createWithVolume: aNumberOfCubicMetres withPetrol: aPercentageOfPetrol withWater: aPercentageOfWater withGas: aPercentageOfGas withMoney: anAmountOfDollars		logger := OrderedCollection new.	aPercentageOfPetrol + aPercentageOfWater + aPercentageOfGas = 1 ifFalse: [ ^(Error signal: 'percentages dont sum 1') ].	parcels := OrderedCollection new.	originalVolume := aNumberOfCubicMetres.	petrolVolume := aNumberOfCubicMetres * aPercentageOfPetrol.	waterVolume := aNumberOfCubicMetres * aPercentageOfWater.	gasVolume := aNumberOfCubicMetres * aPercentageOfGas.	balanceSheet := Balance initializeWith: anAmountOfDollars.	processingPlants := OrderedCollection new. 	tanks := OrderedCollection new.	alpha1 := 0.1.	alpha2 := 0.01.	anExtractionHappenedToday := false.	aReinjectionHappenedToday := false.	globalVolumeExtracted := 0.! !!Oilfield methodsFor: 'private' stamp: 'sfernandezledesma 6/3/2017 14:55'!createWithVolume: aNumberOfCubicMetres withPetrol: aPercentageOfPetrol withWater: aPercentageOfWater withGas: aPercentageOfGas withMoney: anAmountOfDollars alpha1: aNumber1 alpha2: aNumber2	logger := OrderedCollection new.		aPercentageOfPetrol + aPercentageOfWater + aPercentageOfGas = 1 ifFalse: [ ^(Error signal: 'percentages dont sum 1') ].	parcels := OrderedCollection new.	originalVolume := aNumberOfCubicMetres.	petrolVolume := aNumberOfCubicMetres * aPercentageOfPetrol.	waterVolume := aNumberOfCubicMetres * aPercentageOfWater.	gasVolume := aNumberOfCubicMetres * aPercentageOfGas.	balanceSheet := Balance initializeWith: anAmountOfDollars.	processingPlants := OrderedCollection new. 	tanks := OrderedCollection new.	alpha1 := aNumber1.	alpha2 := aNumber2.	anExtractionHappenedToday := false.	aReinjectionHappenedToday := false.	globalVolumeExtracted := 0.! !!Oilfield methodsFor: 'private' stamp: 'PedroRodriguez 5/17/2017 11:23'!extractProduct: aNumberOfCubicMetres	" update quantities of each variable / element, and update the pressure of each parcel "	| percentagePetrol percentageWater percentageGas newVolume totalVolumeBefore |		aNumberOfCubicMetres > (petrolVolume + waterVolume + gasVolume) 		ifTrue: [ ^(Error signal: 'not enough product to extract') ].		globalVolumeExtracted := globalVolumeExtracted + aNumberOfCubicMetres.		totalVolumeBefore := petrolVolume + waterVolume + gasVolume.	percentagePetrol := petrolVolume / totalVolumeBefore. 	percentageWater := waterVolume / totalVolumeBefore.	percentageGas := gasVolume / totalVolumeBefore.		" update volume "	petrolVolume := petrolVolume - (aNumberOfCubicMetres * percentagePetrol).	waterVolume := waterVolume - (aNumberOfCubicMetres * percentageWater).	gasVolume := gasVolume - (aNumberOfCubicMetres * percentageGas).				" update pressure of parcels "	newVolume := petrolVolume + waterVolume + gasVolume.	parcels collect: [ :eachParcel |		| beta |		beta := (0.1 * (newVolume / originalVolume) ) / (self numberOfActiveWells ** (2 / 3) ).		eachParcel updatePressureWithBeta: beta.	]! !!Oilfield methodsFor: 'private' stamp: 'sfernandezledesma 5/30/2017 18:50'!addTank: aStorageTank	"comment stating purpose of message"		self checkEnoughMoneyForSpending: (aStorageTank cost).	self balanceSheet subtract: (aStorageTank cost).	tanks add: aStorageTank ! !!Oilfield methodsFor: 'private' stamp: 'sfernandezledesma 6/3/2017 14:55'!createWithPetrol: aPercentageOfPetrol withWater: aPercentageOfWater withGas: aPercentageOfGas withMoney: anAmountOfDollars	| aNumberOfCubicMetres |	logger := OrderedCollection new.	aNumberOfCubicMetres := 1e8.	originalVolume := 1e8.	aPercentageOfPetrol + aPercentageOfWater + aPercentageOfGas = 1 ifFalse: [ ^(Error signal: 'percentages dont sum 1') ].	parcels := OrderedCollection new.	petrolVolume := aNumberOfCubicMetres * aPercentageOfPetrol.	waterVolume := aNumberOfCubicMetres * aPercentageOfWater.	gasVolume := aNumberOfCubicMetres * aPercentageOfGas.	balanceSheet := Balance initializeWith: anAmountOfDollars.	processingPlants := OrderedCollection new. 	tanks := OrderedCollection new.	alpha1 := 0.1.	alpha2 := 0.01.	anExtractionHappenedToday := false.	aReinjectionHappenedToday := false.	globalVolumeExtracted := 0.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Oilfield class	instanceVariableNames: ''!!Oilfield class methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:09'!createWithVolume: aNumberOfCubicMetres withPetrol: aPercentageOfPetrol withWater: aPercentageOfWater withGas: aPercentageOfGas withMoney: anAmountOfDollars	^self new 		createWithVolume: aNumberOfCubicMetres 		withPetrol: aPercentageOfPetrol 		withWater: aPercentageOfWater 		withGas: aPercentageOfGas 		withMoney: anAmountOfDollars! !!Oilfield class methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:10'!createWithVolume: aNumberOfCubicMetres withPetrol: aPercentageOfPetrol withWater: aPercentageOfWater withGas: aPercentageOfGas withMoney: anAmountOfDollars alpha1: aNumber1 alpha2: aNumber2	^self new 		createWithVolume: aNumberOfCubicMetres 		withPetrol: aPercentageOfPetrol 		withWater: aPercentageOfWater 		withGas: aPercentageOfGas 		withMoney: anAmountOfDollars 		alpha1: aNumber1 		alpha2: aNumber2! !!Oilfield class methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:09'!createWithPetrol: aPercentageOfPetrol withWater: aPercentageOfWater withGas: aPercentageOfGas withMoney: anAmountOfDollars	^self new 		createWithPetrol: aPercentageOfPetrol 		withWater: aPercentageOfWater 		withGas: aPercentageOfGas 		withMoney: anAmountOfDollars! !Object subclass: #OilfieldElement	instanceVariableNames: 'oilfield'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!OilfieldElement commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	oilfield:		<Object>    Implementation Points!!OilfieldElement methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 10:48'!advanceOneDay	"comment stating purpose of message"	^self subclassResponsibility ! !!OilfieldElement methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 10:50'!oilfield	"comment stating purpose of message"	^oilfield ! !Object subclass: #OilfieldOutline	instanceVariableNames: 'strategies'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!OilfieldOutline commentStamp: '<historical>' prior: 0!I am an Oilfield Outline. I decide what actions do according to the state of the simulation and the oilfield!!OilfieldOutline methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/31/2017 19:30'!nextActionsOf: aSimulation in: anOilfield	^ strategies! !!OilfieldOutline methodsFor: 'private' stamp: 'sfernandezledesma 5/31/2017 19:30'!createWith: anArrayOfActions	strategies := anArrayOfActions ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OilfieldOutline class	instanceVariableNames: ''!!OilfieldOutline class methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/31/2017 19:48'!createWithBuildStrategy: aBuildStrategy RentStrategy: aRentStrategy DigStrategy: aDigStrategy ReinjectStrategy: aReinjectStrategy SellStrategy: aSellStrategy ExtractStrategy: anExtractStrategy	"Creates an instance of OilfieldOutline with the strategies ordered"	| strategies |		strategies := Array new: 6.	strategies		at: 1 put: aBuildStrategy;		at: 2 put: aRentStrategy;		at: 3 put: aDigStrategy;		at: 4 put: aReinjectStrategy;		at: 5 put: aSellStrategy;		at: 6 put: anExtractStrategy.		^self new createWith: strategies.! !!OilfieldOutline class methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/31/2017 19:47'!createWith: anArrayOfStrategies	^ self new createWith: anArrayOfStrategies! !OilfieldElement subclass: #Parcel	instanceVariableNames: 'depth pressure terrain well hasWell rigs name'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Parcel commentStamp: '<historical>' prior: 0!I am a parcel. I can have 0 or 1 well in me.!!Parcel methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/5/2017 11:39'!advanceOneDay	"comment stating purpose of message"		rigs do: [ :eachRig | 		eachRig advanceOneDay		].	hasWell ifTrue: [ 		well advanceOneDay	]! !!Parcel methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 18:19'!updatePressureWithBeta: beta	"comment stating purpose of message"	pressure := pressure * (Float e ** (-1 * beta) ).! !!Parcel methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 07:32'!addRig: aRig	"comment stating purpose of message"	rigs add: aRig! !!Parcel methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/5/2017 12:01'!initializeWell: aWell	"comment stating purpose of message"	self checkWellNotCreatedYet.	hasWell := true.	well := aWell.! !!Parcel methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 07:33'!moveRig: aRig to: aParcel	"comment stating purpose of message"	rigs reject: aRig.	aParcel addRig: aRig.! !!Parcel methodsFor: 'private' stamp: 'sfernandezledesma 6/3/2017 12:25'!createWithDepth: aNumberOfMetres pressure: aNumberOfHectoPascals terrain: aTerrain withName: aName inOilfield: anOilfield	depth := aNumberOfMetres.	pressure := aNumberOfHectoPascals.	terrain := aTerrain.	hasWell := false.	rigs := LinkedList new.	name := aName.	oilfield := anOilfield.	oilfield parcels add: self.! !!Parcel methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 08:56'!depth	"comment stating purpose of message"	^depth! !!Parcel methodsFor: 'accessing' stamp: 'PedroRodriguez 4/16/2017 18:45'!pressure	"comment stating purpose of message"	^pressure! !!Parcel methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 23:29'!terrain	"comment stating purpose of message"	^terrain! !!Parcel methodsFor: 'accessing' stamp: 'PedroRodriguez 4/17/2017 14:29'!name	"comment stating purpose of message"	^name! !!Parcel methodsFor: 'accessing' stamp: 'PedroRodriguez 5/8/2017 12:43'!hasWell	"comment stating purpose of message"	^hasWell! !!Parcel methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 08:51'!well	"comment stating purpose of message"	hasWell ifFalse: [ ^(Error signal: 'i dont have a Well in me yet') ].	^well! !!Parcel methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 07:31'!rigs	"comment stating purpose of message"	^rigs! !!Parcel methodsFor: 'checking' stamp: 'PedroRodriguez 5/5/2017 12:01'!checkWellNotCreatedYet.			hasWell ifTrue: [ ^(Error signal: 'a Well has already been created in this Parcel') ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Parcel class	instanceVariableNames: 'lastId'!!Parcel class methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:15'!createWithDepth: aNumberOfMetres pressure: aNumberOfHectoPascals terrain: aTerrain inOilfield: anOilfield	lastId isNil ifTrue: [ lastId := 1 ] ifFalse: [ lastId := lastId + 1 ].	^ self new 		createWithDepth: aNumberOfMetres 		pressure: aNumberOfHectoPascals 		terrain: aTerrain		withName: lastId		inOilfield: anOilfield.! !OilfieldElement subclass: #ProcessingPlant	instanceVariableNames: 'maxDailyProductProcessing remainingDaysToCompletion cost capacity tanks'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!ProcessingPlant commentStamp: '<historical>' prior: 0!I am a processing plant.I take care of separating product in water, gas and petroleum.Several wells can be connected to me at the same time, with the limitation of my processing capacity. !!ProcessingPlant methodsFor: 'private' stamp: 'sfernandezledesma 6/3/2017 15:36'!initializeWithMaxDailyProductProcessing: aNumber remainingDaysToCompletion: anAmountOfDays cost: aNumberOfDollars storageTanks: aListOfTanks inOilfield: anOilfield	"comment stating purpose of message"	maxDailyProductProcessing := aNumber.	capacity := aNumber.	remainingDaysToCompletion := anAmountOfDays.	cost := aNumberOfDollars.	tanks := aListOfTanks.	oilfield := anOilfield.	oilfield addProcessingPlant: self.	oilfield logEvent: 'Construction of Processing Plant started.'.! !!ProcessingPlant methodsFor: 'checking' stamp: 'sfernandezledesma 5/30/2017 18:37'!checkTanks	"comment stating purpose of message"	tanks isEmpty 		ifTrue: [ ^(Error signal: 'the processing plant does not have a deposit to send the gas and water ') ].		! !!ProcessingPlant methodsFor: 'checking' stamp: 'PedroRodriguez 4/21/2017 15:21'!checkCapacity: aNumberOfCubicMetres	"comment stating purpose of message"	capacity < aNumberOfCubicMetres 		ifTrue: [ ^(Error signal: 'the processing plant does not have enough capacity ') ].		! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 12:28'!isAvailableToProcess: aNumberOfCubicMetres	"comment stating purpose of message"	" TODO: check that the the almacenation tanks can handle aNumberOfCubicMetres of product "	^remainingDaysToCompletion < 1! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/30/2017 18:39'!sendToWaterTank: aNumberOfCubicMetres	"comment stating purpose of message"	| waterTanks cubicMetresLeft availableCapacity |	waterTanks := tanks select: [ :each | each isMemberOf: WaterTank ].		availableCapacity := 0.	waterTanks do: [ :each | availableCapacity := availableCapacity + each capacity ].	availableCapacity < aNumberOfCubicMetres ifTrue: [ ^(Error signal: 'not enough capacity of ATs connected to PP') ].		cubicMetresLeft := aNumberOfCubicMetres.	waterTanks do: [ :each | 		cubicMetresLeft > 0 ifTrue: [ 			| toAlmacenate |			toAlmacenate := cubicMetresLeft min: each capacity. 			each storeWater: cubicMetresLeft.			cubicMetresLeft := cubicMetresLeft - toAlmacenate.		]	]		! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/30/2017 18:39'!sendToGasTank: aNumberOfCubicMetres	"comment stating purpose of message"	| gasTanks cubicMetresLeft availableCapacity |	gasTanks := tanks select: [ :each | each isMemberOf: GasTank ].		availableCapacity := 0.	gasTanks do: [ :each | availableCapacity := availableCapacity + each capacity ].	availableCapacity < aNumberOfCubicMetres ifTrue: [ ^(Error signal: 'not enough capacity of ATs connected to PP') ].		cubicMetresLeft := aNumberOfCubicMetres.	gasTanks do: [ :each | 		cubicMetresLeft > 0 ifTrue: [ 			| toAlmacenate |			toAlmacenate := cubicMetresLeft min: each capacity. 			each storeGas: cubicMetresLeft.			cubicMetresLeft := cubicMetresLeft - toAlmacenate.		]	]				! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 13:01'!isAlreadyBuilt	"comment stating purpose of message"	" TODO: check that the the almacenation tanks can handle aNumberOfCubicMetres of product "	^remainingDaysToCompletion < 1! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 12:22'!getRidOfPetrol: aNumberOfCubicMetresOfPetrol	^1			! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/30/2017 18:35'!process: aNumberOfCubicMetres withPercentages: anArrayOfPercentagesWGP	"comment stating purpose of message"	self checkTanks.	self checkCapacity: aNumberOfCubicMetres.			capacity := capacity - aNumberOfCubicMetres.		" TODO: define 'types of almacenation tanks' to separate water, gas and petrol "	self sendToWaterTank: (anArrayOfPercentagesWGP at: 1) * aNumberOfCubicMetres.	self sendToGasTank: (anArrayOfPercentagesWGP at: 2) * aNumberOfCubicMetres.	self getRidOfPetrol: (anArrayOfPercentagesWGP at: 3) * aNumberOfCubicMetres.		! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/30/2017 18:37'!connectToTank: anAlmacenationTank	"comment stating purpose of message"	tanks add: anAlmacenationTank.! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/17/2017 17:52'!resetCapacity	"comment stating purpose of message"	capacity := maxDailyProductProcessing.! !!ProcessingPlant methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 15:30'!advanceOneDay	"comment stating purpose of message"		remainingDaysToCompletion > 0 		ifTrue: [ 			remainingDaysToCompletion := remainingDaysToCompletion - 1.			remainingDaysToCompletion = 0 ifTrue: [ oilfield logEvent: 'Construction of Processing Plant complete.'. ]		].	capacity := maxDailyProductProcessing.! !!ProcessingPlant methodsFor: 'accessing' stamp: 'sfernandezledesma 5/30/2017 18:37'!capacity	"comment stating purpose of message"	| totalCapacityOfMyAlmacenationTanks |	totalCapacityOfMyAlmacenationTanks := 0.	tanks do: [ :each | 		totalCapacityOfMyAlmacenationTanks := totalCapacityOfMyAlmacenationTanks + each capacity	].	^capacity min: totalCapacityOfMyAlmacenationTanks.! !!ProcessingPlant methodsFor: 'accessing' stamp: 'sfernandezledesma 5/30/2017 18:37'!tanks	"comment stating purpose of message"	^tanks! !!ProcessingPlant methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 12:34'!remainingDaysToCompletion	"comment stating purpose of message"	^remainingDaysToCompletion! !!ProcessingPlant methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 21:29'!cost	"comment stating purpose of message"	^cost! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ProcessingPlant class	instanceVariableNames: ''!!ProcessingPlant class methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 14:22'!initializeWithMaxDailyProductProcessing: aNumber remainingDaysToCompletion: anAmountOfDays cost: aNumberOfDollars storageTanks: aListOfTanks inOilfield: anOilfield	"comment stating purpose of message"	^self new 		initializeWithMaxDailyProductProcessing: aNumber 		remainingDaysToCompletion: anAmountOfDays 		cost: aNumberOfDollars 		storageTanks: aListOfTanks		inOilfield: anOilfield! !OilfieldElement subclass: #Rig	instanceVariableNames: 'power costRent costDailyConsumption isActive lastAssignedWell daysLeftPayingBasicFee'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Rig commentStamp: 'PedroRodriguez 4/14/2017 07:30' prior: 0!I am a Rig. I am encharged of digging in a well in a parcel of an oilfield.!!Rig methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 23:16'!deactivate	"comment stating purpose of message"	isActive := false.! !!Rig methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 23:27'!power	"comment stating purpose of message"	^power! !!Rig methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 11:45'!advanceOneDay	"comment stating purpose of message"	daysLeftPayingBasicFee > 0 ifTrue: [ daysLeftPayingBasicFee := daysLeftPayingBasicFee - 1 ]! !!Rig methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 10:54'!dig	" it is assumed that each rig can only dig once a day in each well "		self checkAvailabilityToDig.	lastAssignedWell digWith: self.	oilfield payDailyConsumptionForRig: self.! !!Rig methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 11:09'!assignWell: aWell	"comment stating purpose of message"	isActive := true.	lastAssignedWell := aWell.! !!Rig methodsFor: 'checking' stamp: 'PedroRodriguez 5/5/2017 11:11'!checkAvailabilityToDig		isActive ifFalse: [ ^(Error signal: 'this rig is inactive. it cant dig any Well') ].! !!Rig methodsFor: 'private' stamp: 'sfernandezledesma 6/3/2017 10:54'!power: aNumberOfMetresPerDay costRent: aNumberOfDollars costDailyConsumption: aNumberOfLitres toParcel: aParcel daysBasicFee: anAmountOfDays forOilfield: anOilfield	"comment stating purpose of message"	power := aNumberOfMetresPerDay.	costRent :=aNumberOfDollars.	costDailyConsumption := aNumberOfLitres.	isActive := false.	aParcel addRig: self.	daysLeftPayingBasicFee := anAmountOfDays.	oilfield := anOilfield! !!Rig methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 15:31'!costRent	"comment stating purpose of message"	^costRent! !!Rig methodsFor: 'accessing' stamp: 'PedroRodriguez 5/5/2017 11:44'!costDailyConsumption	"comment stating purpose of message"	^costDailyConsumption! !!Rig methodsFor: 'accessing' stamp: 'PedroRodriguez 4/16/2017 10:50'!daysLeftPayingBasicFee	"comment stating purpose of message"	^daysLeftPayingBasicFee! !!Rig methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 09:02'!isActive	"comment stating purpose of message"	^isActive! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Rig class	instanceVariableNames: ''!!Rig class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/30/2017 21:29'!power: aNumberOfMetresPerDay costRent: aNumberOfDollars costDailyConsumption: aNumberOfLitres toParcel: aParcel daysBasicFee: anAmountOfDays forOilfield: anOilfield	"comment stating purpose of message"	^self new		power: aNumberOfMetresPerDay 		costRent: aNumberOfDollars 		costDailyConsumption: aNumberOfLitres 		toParcel: aParcel 		daysBasicFee: anAmountOfDays		forOilfield: anOilfield! !Object subclass: #Simulator	instanceVariableNames: 'daysSimulated maxSimultaneousRigs desiredAmountOfWells costOfRentingRigs costOfProcessingPlants costOfAlmacenationTanks costOfConsumptionRigs powerOfRigs'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Simulator commentStamp: 'PedroRodriguez 4/14/2017 10:43' prior: 0!I am a simulatorI have the responsibility of assigning rigs to wells!!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/19/2017 18:22'!daysSimulated	^daysSimulated! !!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 15:51'!costOfConsumptionRigs	^costOfConsumptionRigs! !!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 15:50'!costOfRentingRigs	^costOfRentingRigs! !!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/15/2017 14:52'!desiredAmountOfWells	"comment stating purpose of message"	^desiredAmountOfWells! !!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 21:14'!costOfProcessingPlants	"comment stating purpose of message"	^costOfProcessingPlants ! !!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/16/2017 11:32'!powerOfRigs	"comment stating purpose of message"	^powerOfRigs! !!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 21:14'!costOfAlmacenationTanks	"comment stating purpose of message"	^costOfAlmacenationTanks! !!Simulator methodsFor: 'accessing' stamp: 'PedroRodriguez 4/16/2017 11:59'!maxSimultaneousRigs	"comment stating purpose of message"	^maxSimultaneousRigs! !!Simulator methodsFor: 'private' stamp: 'sfernandezledesma 6/3/2017 15:16'!initializeWithMaxSimultaneousRigs: anInteger desiredAmountOfWells: anInteger2 costOfRentingRigs: aNumberOfDollars powerOfRigs: aNumberOfMetresPerDay costOfConsumptionRigs: aNumberOfDollars2 costOfProcessingPlants: aNumberOfDollars3 costOfAlmacenationTanks: aNumberOfDollars4		daysSimulated := 0.	maxSimultaneousRigs := anInteger.	desiredAmountOfWells := anInteger2.	costOfRentingRigs := aNumberOfDollars.	powerOfRigs := aNumberOfMetresPerDay.	costOfConsumptionRigs := aNumberOfDollars2.	costOfProcessingPlants := aNumberOfDollars3.	costOfAlmacenationTanks := aNumberOfDollars4. ! !!Simulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 15:49'!logOilfieldStatus: anOilfield	"logs the volume of each chemical at this moment"	anOilfield logEvent: '==> Status of Oilfield after simulating for ', daysSimulated asString, ' days: ' asString, 		Character cr asString, 'Petrol: ', anOilfield petrolVolume asString,		Character cr asString, 'Water: ', anOilfield waterVolume asString,		Character cr asString, 'Gas: ', anOilfield gasVolume asString,		Character cr asString, 'Balance: ', anOilfield balanceSheet totalMoney asString, ' dollars',		Character cr asString, '================================================'.! !!Simulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 15:04'!run: anOilfield until: aCondition with: anOilfieldOutline	[ aCondition check: anOilfield in: self ]		whileTrue: [ self nextDay: anOilfield with: anOilfieldOutline ].	anOilfield printLog.! !!Simulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/28/2017 22:32'!outputLogInformation	" output information of anOilfield on log "			" technique: each action returns a string, containing information about what has been done (!!!!!!) "	log do: [ :each | Transcript show: each; cr ].! !!Simulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 15:00'!logCurrentDayOfOilfield: anOilfield	"logs the current day"	anOilfield logEvent: 'Day ', (daysSimulated + 1) asString.! !!Simulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 15:06'!nextDay: anOilfield with: anOilfieldGuideline	" simulate a new day in anOilfield according to the rules in anOilfieldOutline "	| actions |	self logCurrentDayOfOilfield: anOilfield.	actions := anOilfieldGuideline nextActionsOf: self in: anOilfield.	actions do: [ :each | each value: anOilfield value: self ].	anOilfield advanceOneDay.	daysSimulated := daysSimulated + 1.	self logOilfieldStatus: anOilfield.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Simulator class	instanceVariableNames: ''!!Simulator class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/14/2017 20:09'!initializeWithMaxSimultaneousRigs: anInteger desiredAmountOfWells: anInteger2 costOfRentingRigs: aNumberOfDollars powerOfRigs: aNumberOfMetresPerDay costOfConsumptionRigs: aNumberOfDollars2 costOfProcessingPlants: aNumberOfDollars3 costOfAlmacenationTanks: aNumberOfDollars4	"comment stating purpose of message"	^self new		initializeWithMaxSimultaneousRigs: anInteger 		desiredAmountOfWells: anInteger2 		costOfRentingRigs: aNumberOfDollars 		powerOfRigs: aNumberOfMetresPerDay 		costOfConsumptionRigs: aNumberOfDollars2 		costOfProcessingPlants: aNumberOfDollars3 		costOfAlmacenationTanks: aNumberOfDollars4! !!Simulator class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/17/2017 09:41'!toDo: something! !OilfieldElement subclass: #StorageTank	instanceVariableNames: 'capacity cost remainingDaysToCompletion totalProduct'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!StorageTank commentStamp: '<historical>' prior: 0!I am an almacenation tank. I almacenate water and gas after they are separated by a processingPlant.Gas almacenated in me can be sold at any time to free up some space.Water cannot be sold. It must remain here!!StorageTank methodsFor: 'checking' stamp: 'sfernandezledesma 5/30/2017 18:27'!checkEnoughCapacityForStoring: aNumberOfCubicMetres.		capacity >= aNumberOfCubicMetres ifFalse: [ ^(Error signal: 'cant store so much volume in this storage tank') ]! !!StorageTank methodsFor: 'private' stamp: 'sfernandezledesma 6/3/2017 15:36'!initializeWithCapacity: aNumberOfCubicMetres cost: aNumberOfDollars remainingDaysToCompletion: anAmountOfDays inOilfield: anOilfield	"comment stating purpose of message"	capacity := aNumberOfCubicMetres.	cost := aNumberOfDollars.	remainingDaysToCompletion := anAmountOfDays.	totalProduct := 0.	oilfield := anOilfield.	oilfield addTank: self.	oilfield logEvent: 'Construction of ', self description, ' started.'.! !!StorageTank methodsFor: 'accessing' stamp: 'PedroRodriguez 4/18/2017 15:38'!capacity	"comment stating purpose of message"	^capacity! !!StorageTank methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 21:29'!cost	"comment stating purpose of message"	^cost! !!StorageTank methodsFor: 'accessing' stamp: 'PedroRodriguez 4/14/2017 12:34'!remainingDaysToCompletion	"comment stating purpose of message"	^remainingDaysToCompletion! !!StorageTank methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 15:34'!advanceOneDay	"comment stating purpose of message"		remainingDaysToCompletion > 0 		ifTrue: [ 			remainingDaysToCompletion := remainingDaysToCompletion - 1.			remainingDaysToCompletion = 0 ifTrue: [ oilfield logEvent: 'Construction of ', self description, ' complete.']		]! !!StorageTank methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/2/2017 15:01'!addVolume: aNumberOfCubicMetres. 	self checkEnoughCapacityForStoring: aNumberOfCubicMetres.	totalProduct := totalProduct + aNumberOfCubicMetres.	capacity := capacity - aNumberOfCubicMetres! !!StorageTank methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 15:33'!description	"comment stating purpose of message"	^self subclassResponsibility.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!StorageTank class	instanceVariableNames: ''!!StorageTank class methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 13:19'!initializeWithCapacity: aNumberOfCubicMetres cost: aNumberOfDollars remainingDaysToCompletion: anAmountOfDays inOilfield: anOilfield	"comment stating purpose of message"	^self new 		initializeWithCapacity: aNumberOfCubicMetres 		cost: aNumberOfDollars 		remainingDaysToCompletion: anAmountOfDays		inOilfield: anOilfield! !StorageTank subclass: #GasTank	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!GasTank commentStamp: 'PedroRodriguez 4/21/2017 15:51' prior: 0!Hi!! i am a gas AT!!GasTank methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/2/2017 15:01'!storeGas: aNumberOfCubicMetres	"comment stating purpose of message"	self addVolume: aNumberOfCubicMetres. 		! !!GasTank methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/5/2017 12:06'!gas	"comment stating purpose of message"	^totalProduct! !!GasTank methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 15:33'!description	"comment stating purpose of message"	^'Gas Tank'! !Object subclass: #Strategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Strategy commentStamp: '<historical>' prior: 0!I am an action. I modify the state of an oilfield during a simulation!!Strategy methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/31/2017 19:19'!noStrategy	"Returns an empty closure which represents the absence of a strategy"	^ [ :anOilfield :aSimulator |  ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Strategy class	instanceVariableNames: 'oilfield'!Strategy subclass: #Build	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Build commentStamp: '<historical>' prior: 0!I take care of  building the strctures that are needed to be built in an oilfield!!Build methodsFor: 'setup' stamp: 'PedroRodriguez 5/8/2017 13:24'!createWellOnParcel: aParcel	^ [ :anOilfield :aSimulator |  		aParcel hasWell ifFalse: 			[ Well 				initializeOn: aParcel				withName: 'well', anOilfield numberOfWells asString				connectedTo: (anOilfield assignProcessingPlant);			  yourself.			]	]! !!Build methodsFor: 'setup' stamp: 'sfernandezledesma 6/3/2017 14:25'!createPPwithMaxDailyProcessing: aNumberOfCubicMetres withDaysToCompletion: aNumberOfDays connectedToWells: aCollectionOfWells	" require: ... "	^ [ :anOilfield :aSimulator |		| aPP |		aPP := ProcessingPlant 			initializeWithMaxDailyProductProcessing: aNumberOfCubicMetres			remainingDaysToCompletion: aNumberOfDays			cost: aSimulator costOfProcessingPlants			storageTanks: OrderedCollection new			inOilfield: anOilfield.		aPP	]! !!Build methodsFor: 'setup' stamp: 'sfernandezledesma 6/3/2017 13:17'!createWATwithMaxCapacity: aNumberOfCubicMetres withDaysToCompletion: aNumberOfDays	" require: ... "	^ [ :anOilfield :aSimulator |		| aWAT |		aWAT := WaterTank 			initializeWithCapacity: aNumberOfCubicMetres 			cost: aSimulator costOfAlmacenationTanks			remainingDaysToCompletion: aNumberOfDays			inOilfield: anOilfield.		aWAT	]! !!Build methodsFor: 'setup' stamp: 'sfernandezledesma 6/3/2017 13:18'!createGATWithMaxCapacity: aNumberOfCubicMetres withDaysToCompletion: aNumberOfDays	" require: ... "	^ [ :anOilfield :aSimulator |		| aGAT |		aGAT := GasTank 			initializeWithCapacity: aNumberOfCubicMetres 			cost: aSimulator costOfAlmacenationTanks			remainingDaysToCompletion: aNumberOfDays			inOilfield: anOilfield.		aGAT	]! !!Build methodsFor: 'strategies' stamp: 'PedroRodriguez 5/17/2017 09:55'!aBuildStrategy6	"on each day until reaching the desired amount of wells, create one well on the parcel number { number of days simulated + 1 }	 and let the oilfield assign to it some processing plant (in this case there is only 1 processing plant)"	^ [ :anOilfield :aSimulator |					anOilfield numberOfWells < aSimulator desiredAmountOfWells ifTrue: [ 			| aParcel |			aParcel := anOilfield parcels at: aSimulator daysSimulated + 1.			Well initializeOn: aParcel withName: 'well', anOilfield numberOfWells asString. 		]	]! !!Build methodsFor: 'strategies' stamp: 'sfernandezledesma 5/30/2017 18:35'!aBuildStrategy3	"on day 0 create almacenation tanks with 1000 capacity. 	 on day 0 create a processing plant with daily capacity 100 and connect it to these almacenation tanks	 on day 0 create a well on parcel number 1 and let the oilfield assign to it the only possible processing plant available"	^ [ :anOilfield :aSimulator |				aSimulator daysSimulated = 0 ifTrue: [ 			| aProcessingPlant aWaterAlmacenationTank aGasAlmacenationTank aListOfAlmacenationTanks |			aWaterAlmacenationTank := (self createWATwithMaxCapacity: 1000 withDaysToCompletion: 0)				value: anOilfield value: aSimulator.			aGasAlmacenationTank := (self createGATWithMaxCapacity: 1000 withDaysToCompletion: 0)				value: anOilfield value: aSimulator.			aListOfAlmacenationTanks := OrderedCollection new.			aListOfAlmacenationTanks add: aWaterAlmacenationTank.			aListOfAlmacenationTanks add: aGasAlmacenationTank.						aProcessingPlant := (self createPPwithMaxDailyProcessing: 100 withDaysToCompletion: 0 connectedToWells: OrderedCollection new)				value: anOilfield value: aSimulator. 			aProcessingPlant connectToTank: aWaterAlmacenationTank.			aProcessingPlant connectToTank: aGasAlmacenationTank.						(self createWellOnParcel: (anOilfield parcels at: 1)) value: anOilfield value: aSimulator.		]	].! !!Build methodsFor: 'strategies' stamp: 'sfernandezledesma 6/3/2017 15:42'!aBuildStrategy5	"on day 0 create almacenation tanks with 1000 capacity. 	 on day 0 create a processing plant with daily capacity 100 and connect it to these almacenation tanks	 on ech of the following days until reaching the desired amount of wells, create one well on some parcel that hasnt a Well yet 	 and let the oilfield assign to it some processing plant (in this case there is only 1 processing plant)"	^ [ :anOilfield :aSimulator |				aSimulator daysSimulated = 0 ifTrue: [ 			| aProcessingPlant aWaterAlmacenationTank aGasAlmacenationTank aListOfAlmacenationTanks |			aWaterAlmacenationTank := (self createWATwithMaxCapacity: 1000 withDaysToCompletion: 2)				value: anOilfield value: aSimulator.			aGasAlmacenationTank := (self createGATWithMaxCapacity: 1000 withDaysToCompletion: 2)				value: anOilfield value: aSimulator.			aListOfAlmacenationTanks := OrderedCollection new.			aListOfAlmacenationTanks add: aWaterAlmacenationTank.			aListOfAlmacenationTanks add: aGasAlmacenationTank.						aProcessingPlant := (self 				createPPwithMaxDailyProcessing: 100 				withDaysToCompletion: 3 				connectedToWells: OrderedCollection new)					value: anOilfield value: aSimulator. 			aProcessingPlant connectToTank: aWaterAlmacenationTank.			aProcessingPlant connectToTank: aGasAlmacenationTank.		].		anOilfield numberOfWells < aSimulator desiredAmountOfWells ifTrue: [ 			| parcelsWithoutWell |			parcelsWithoutWell := anOilfield parcels select: [ :eachParcel | eachParcel hasWell not ].			parcelsWithoutWell size > 0 ifTrue: [ 				Well initializeOn: parcelsWithoutWell first withName: 'well', anOilfield numberOfWells asString 					  connectedTo: (anOilfield assignProcessingPlant)			]		]	]! !!Build methodsFor: 'strategies' stamp: 'sfernandezledesma 6/3/2017 15:47'!aBuildStrategy4	"on day 0 create almacenation tanks with 1000 capacity. 	 on day 0 create a processing plant with daily capacity 100 and connect it to these almacenation tanks	 on day 0 create a well on parcel number 1 and 2 and let the oilfield assign to it the only possible processing plants available"	^ [ :anOilfield :aSimulator |				aSimulator daysSimulated = 0 ifTrue: [ 			| aProcessingPlant aWaterAlmacenationTank aGasAlmacenationTank aListOfAlmacenationTanks |			aWaterAlmacenationTank := (self createWATwithMaxCapacity: 1000 withDaysToCompletion: 1)				value: anOilfield value: aSimulator.			aGasAlmacenationTank := (self createGATWithMaxCapacity: 1000 withDaysToCompletion: 1)				value: anOilfield value: aSimulator.			aListOfAlmacenationTanks := OrderedCollection new.			aListOfAlmacenationTanks add: aWaterAlmacenationTank.			aListOfAlmacenationTanks add: aGasAlmacenationTank.						aProcessingPlant := (self 				createPPwithMaxDailyProcessing: 100 				withDaysToCompletion: 1				connectedToWells: OrderedCollection new)					value: anOilfield value: aSimulator. 			aProcessingPlant connectToTank: aWaterAlmacenationTank.			aProcessingPlant connectToTank: aGasAlmacenationTank.						(self createWellOnParcel: (anOilfield parcels at: 1)) value: anOilfield value: aSimulator.			(self createWellOnParcel: (anOilfield parcels at: 2)) value: anOilfield value: aSimulator.		]	].! !!Build methodsFor: 'strategies' stamp: 'sfernandezledesma 5/30/2017 18:35'!aBuildStrategy2	"on day 0 create almacenation tanks with 1e9 capacity. 	 on day 0 create a processing plant with daily capacity 1e9 and connect it to these almacenation tanks	 on day 0 create a well on parcel number 1 and let the oilfield assign to it the only possible processing plant available"	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 0 ifTrue: [ 			| aProcessingPlant aWaterAlmacenationTank aGasAlmacenationTank aListOfAlmacenationTanks |			aWaterAlmacenationTank := 				(self createWATwithMaxCapacity: 1e9 withDaysToCompletion: 0) 					value: anOilfield value: aSimulator.			aGasAlmacenationTank := 				(self createGATWithMaxCapacity: 1e9 withDaysToCompletion: 0)					value: anOilfield value: aSimulator.			aListOfAlmacenationTanks := OrderedCollection new.			aListOfAlmacenationTanks add: aWaterAlmacenationTank.			aListOfAlmacenationTanks add: aGasAlmacenationTank.			aProcessingPlant := 				(self createPPwithMaxDailyProcessing: 1e9 withDaysToCompletion: 0 connectedToWells: OrderedCollection new)					value: anOilfield value: aSimulator.			aProcessingPlant connectToTank: aWaterAlmacenationTank.			aProcessingPlant connectToTank: aGasAlmacenationTank.						(self createWellOnParcel: (anOilfield parcels at: 1)) value: anOilfield value: aSimulator.		]	].! !!Build methodsFor: 'strategies' stamp: 'sfernandezledesma 5/30/2017 18:35'!aBuildStrategy1	"on day 0 create almacenation tanks with 1e9 capacity. 	 on day 0 create a processing plant with daily capacity 1e9 and connect it to these almacenation tanks"	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 0 ifTrue: [ 			| aProcessingPlant aWaterAlmacenationTank aGasAlmacenationTank aListOfAlmacenationTanks |			aWaterAlmacenationTank := 				(self createWATwithMaxCapacity: 1e9 withDaysToCompletion: 0) 					value: anOilfield value: aSimulator.			aGasAlmacenationTank := 				(self createGATWithMaxCapacity: 1e9 withDaysToCompletion: 0)					value: anOilfield value: aSimulator.			aListOfAlmacenationTanks := OrderedCollection new.			aListOfAlmacenationTanks add: aWaterAlmacenationTank.			aListOfAlmacenationTanks add: aGasAlmacenationTank.			aProcessingPlant := 				(self createPPwithMaxDailyProcessing: 1e9 withDaysToCompletion: 0 connectedToWells: OrderedCollection new)					value: anOilfield value: aSimulator.			aProcessingPlant connectToTank: aWaterAlmacenationTank.			aProcessingPlant connectToTank: aGasAlmacenationTank.		]	].! !Strategy subclass: #Buy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Buy commentStamp: '<historical>' prior: 0!I take care of buying the machinery necessary in an oilfield!Strategy subclass: #Dig	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Dig commentStamp: '<historical>' prior: 0!I am responsibility of the digging dynamics of wells in an oifield!!Dig methodsFor: 'categories' stamp: 'PedroRodriguez 4/27/2017 16:19'!aDigStrategy3	"comment stating purpose of message"	^ [ :anOilfield :aSimulator |		| aParcel anotherParcel aCollectionOfRigs anotherCollectionOfRigs |		aSimulator daysSimulated = 0 ifTrue: [			aParcel := anOilfield parcels at: 1 ifAbsent: [ ^(Error signal: 'the oilfield hasnt any parcel to dig') ].			aCollectionOfRigs := aParcel rigs.			self digWithRigs: aCollectionOfRigs.						anotherParcel := anOilfield parcels at: 2 ifAbsent: [ ^(Error signal: 'the oilfield hasnt any parcel to dig') ].			anotherCollectionOfRigs := anotherParcel rigs.			self digWithRigs: aCollectionOfRigs.		].	]! !!Dig methodsFor: 'categories' stamp: 'PedroRodriguez 4/30/2017 20:37'!aDigStrategy4	" dig just the first day the parcel number 1 with all the rigs present in the parcel "	^ [ :anOilfield :aSimulator |		| aParcel aCollectionOfRigs |		aSimulator daysSimulated = 0 ifTrue: [			aParcel := anOilfield parcels at: 1 ifAbsent: [ ^(Error signal: 'the oilfield hasnt any parcel to dig') ].			aCollectionOfRigs := aParcel rigs.			self digWithRigs: aCollectionOfRigs.		].	]! !!Dig methodsFor: 'categories' stamp: 'PedroRodriguez 4/30/2017 21:40'!aDigStrategy5	" dig every day the well in parcel number 1 with all the rigs present in the parcel "	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated <= 4 ifTrue: [			| aParcel aCollectionOfRigs |			aParcel := anOilfield parcels at: aSimulator daysSimulated + 1 								ifAbsent: [ ^(Error signal: 'the oilfield hasnt any parcel to dig') ].			aCollectionOfRigs := aParcel rigs.			self digWithRigs: aCollectionOfRigs.		]	]! !!Dig methodsFor: 'categories' stamp: 'PedroRodriguez 4/27/2017 16:11'!aDigStrategy1	" dig every day the well in parcel number 1 with all the rigs present in the parcel "	^ [ :anOilfield :aSimulator |		| aParcel aCollectionOfRigs |		aParcel := anOilfield parcels at: 1 ifAbsent: [ ^(Error signal: 'the oilfield hasnt any parcel to dig') ].		aCollectionOfRigs := aParcel rigs.		self digWithRigs: aCollectionOfRigs.	]! !!Dig methodsFor: 'categories' stamp: 'PedroRodriguez 4/27/2017 16:12'!aDigStrategy2	"comment stating purpose of message"	^ [ :anOilfield :aSimulator |		| aParcel anotherParcel aCollectionOfRigs anotherCollectionOfRigs |		(aSimulator daysSimulated between: 0 and: 1) ifTrue: [			aParcel := anOilfield parcels at: 1 ifAbsent: [ ^(Error signal: 'the oilfield hasnt any parcel to dig') ].			aCollectionOfRigs := aParcel rigs.			self digWithRigs: aCollectionOfRigs.						anotherParcel := anOilfield parcels at: 2 ifAbsent: [ ^(Error signal: 'the oilfield hasnt any parcel to dig') ].			anotherCollectionOfRigs := anotherParcel rigs.			self digWithRigs: anotherCollectionOfRigs.		].	]! !!Dig methodsFor: 'setup' stamp: 'PedroRodriguez 5/8/2017 13:26'!digWithRigs: aCollectionOfRigs	" dig every day the well in parcel number 1 with all the rigs present in the parcel "	aCollectionOfRigs do: [ :each | each isActive ifTrue: [each dig] ].! !Strategy subclass: #Extract	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Extract commentStamp: '<historical>' prior: 0!I have the responsibility of the strategy to make extraction of product from an oilfield!!Extract methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/27/2017 20:06'!extractStrategy5	" try extracting the first day. It will fail because of not waiting 1 day after the building of the Well "	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 0 ifTrue: [ 			anOilfield parcels collect: [ :eachParcel | 								eachParcel well activate. "activate the Well on every parcel " 				anOilfield extractProduct: anOilfield petrolVolume + anOilfield waterVolume + anOilfield gasVolume 						     fromWell: eachParcel well.			]		]	]! !!Extract methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/27/2017 20:06'!extractStrategy4	" on the second day, activate the Wells and extract full product all at once "	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 1 ifTrue: [ 			self extractAllProductFromAllParcelsIn: anOilfield forSimulation: aSimulator		]	]! !!Extract methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/27/2017 20:04'!extractStrategy2	" extract the second day as much product as it is potentially possible "	^ [ :anOilfield :aSimulator |		(aSimulator daysSimulated between: 2 and: 3) ifTrue: [ 			self extractFromAllParcelsIn: anOilfield forSimulation: aSimulator		]	]! !!Extract methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/17/2017 10:12'!extractStrategy7	" extract every day as much product as it is potentially possible "	^ [ :anOilfield :aSimulator |		self extractFromAllParcelsIn: anOilfield forSimulation: aSimulator	]! !!Extract methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/27/2017 20:03'!extractStrategy1	" extract the second day as much product as it is potentially possible "	^ [ :anOilfield :aSimulator |		(aSimulator daysSimulated between: 1 and: 2) ifTrue: [ 			self extractFromAllParcelsIn: anOilfield forSimulation: aSimulator		]	]! !!Extract methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/27/2017 20:05'!extractStrategy3	" extract the second day as much product as it is potentially possible "	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 1 ifTrue: [ 			self extractFromAllParcelsIn: anOilfield forSimulation: aSimulator		]	]! !!Extract methodsFor: 'setup' stamp: 'sfernandezledesma 6/3/2017 15:08'!extractAllProductFromAllParcelsIn: anOilfield forSimulation: aSimulator	" on the second day, activate the Wells and extract full product all at once "		anOilfield parcels collect: [ :eachParcel | 		eachParcel well activate. "activate the Well on every parcel " 		anOilfield extractProduct: anOilfield petrolVolume + anOilfield waterVolume + anOilfield gasVolume fromWell: eachParcel well.	]! !!Extract methodsFor: 'setup' stamp: 'sfernandezledesma 6/3/2017 15:08'!extractFromAllParcelsIn: anOilfield forSimulation: aSimulator	" extract as much product as it is potentially possible "	anOilfield parcels do: [ :eachParcel | 		eachParcel well activate.		anOilfield extractProduct: (anOilfield potentialVolumeToExtractFrom: eachParcel well) fromWell: eachParcel well.	]! !!Extract methodsFor: 'setup' stamp: 'PedroRodriguez 5/8/2017 23:12'!extractProductWithoutPreviouslyActivatingIn: anOilfield	" try extracting the first day. It will fail because of not waiting 1 day after the building of the Well "	anOilfield parcels do: [ :eachParcel | 		eachParcel well activate. "activate the Well on every parcel " 		anOilfield extractProduct: anOilfield petrolVolume + anOilfield waterVolume + anOilfield gasVolume 					  fromWell: eachParcel well.	]! !Strategy subclass: #Reinject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Reinject commentStamp: '<historical>' prior: 0!I reinyect gas or water into a Well.!!Reinject methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/31/2017 20:11'!reinyectStrategy5	" reinyect 1000 litres of water (that came on hidrant trucks) on the well on every parcel that has a well every day after 4 days"	^[ :anOilfield :aSimulator | 			aSimulator daysSimulated >= 4 ifTrue: [ 				anOilfield parcels do: [ :eachParcel | self reinjectInWell: eachParcel well litres: 1000 inOilfield: anOilfield forSimulation: aSimulator ].			]	]! !!Reinject methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/31/2017 20:10'!reinyectStrategy1	" reinyect 1000 litres of water (that came on hidrant trucks) on the well on parcel number 1 on day number 5"	^[ :anOilfield :aSimulator | 			aSimulator daysSimulated = 5 ifTrue: [ 						  ]	]! !!Reinject methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/31/2017 20:10'!reinyectStrategy3	" reinyect 1000 litres of water (that came on hidrant trucks) on the well on parcel number 1 every day after passing 5 days"	^[ :anOilfield :aSimulator | 			aSimulator daysSimulated >= 5 ifTrue: [ 				anOilfield reinjectWater: 1000.		  ]	]! !!Reinject methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/31/2017 20:11'!reinyectStrategy4	" reinyect 1000 litres of water (that came on hidrant trucks) on the well on every parcel that has a well every day"	^[ :anOilfield :aSimulator | 			anOilfield parcels do: [ :eachParcel | self reinjectInWell: eachParcel well litres: 1000 inOilfield: anOilfield forSimulation: aSimulator].	]! !!Reinject methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/31/2017 20:10'!reinyectStrategy2	" reinyect 1000 litres of water (that came on hidrant trucks) on the well on parcel number 1 every day after passing 5 days"	^[ :anOilfield :aSimulator | 			anOilfield reinjectWater: 1000.	]! !!Reinject methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 15:08'!reinjectInWell: aWell litres: aNumberOfLitres inOilfield: anOilfield forSimulation: aSimulator	"reinject in a well"	aWell reinjectWater: aNumberOfLitres.! !Strategy subclass: #Rent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Rent commentStamp: '<historical>' prior: 0!When a Rig is rented, y have the responsibility of assigning it to some Well in the oilfield!!Rent methodsFor: 'setup' stamp: 'PedroRodriguez 4/30/2017 22:06'!rentRigPower: power cost: cost dailyConsumption: dailyConsumption daysBasicFee: aNumberOfDays forParcel: aParcel inOilfield: anOilfield inSimulator: aSimulator	" rent every day a rig for free and assign it to the parcel number 1. check if oilfield has too many rigs before assigning"	| aRig |	aRig := Rig 		power: power		costRent: cost		costDailyConsumption: dailyConsumption 		toParcel: aParcel		daysBasicFee: aNumberOfDays		forOilfield: anOilfield.	anOilfield numberOfActiveRigs >= aSimulator maxSimultaneousRigs 		ifTrue: [ ^(Error signal: 'cant have so many rigs active') ].	aRig assignWell: aParcel well.	^aRig! !!Rent methodsFor: 'setup' stamp: 'PedroRodriguez 4/30/2017 21:28'!rentRigPower: power cost: cost dailyConsumption: dailyConsumption forParcel: aParcel inOilfield: anOilfield inSimulator: aSimulator	" rent every day a rig for free and assign it to the parcel number 1. check if oilfield has too many rigs before assigning"	| aRig |	aRig := Rig 		power: power		costRent: cost		costDailyConsumption: dailyConsumption 		toParcel: aParcel		daysBasicFee: 0		forOilfield: anOilfield.	anOilfield numberOfActiveRigs >= aSimulator maxSimultaneousRigs 		ifTrue: [ ^(Error signal: 'cant have so many rigs active') ].	aRig assignWell: aParcel well.	^aRig! !!Rent methodsFor: 'strategies' stamp: 'PedroRodriguez 5/17/2017 11:38'!aRentStrategy6	" rent the first day 2 rigs and assign to parcels 1 and 2 "	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 0 ifTrue: [ 			| aRig anotherRig |			aRig := self 				rentRigPower: aSimulator powerOfRigs 		 		cost: aSimulator costOfRentingRigs 				dailyConsumption: aSimulator costOfConsumptionRigs 				forParcel: (anOilfield parcels at: 1)				inOilfield: anOilfield				inSimulator: aSimulator.			anotherRig := self 				rentRigPower: aSimulator powerOfRigs 		 		cost: aSimulator costOfRentingRigs 				dailyConsumption: aSimulator costOfConsumptionRigs 				forParcel: (anOilfield parcels at: 2)				inOilfield: anOilfield				inSimulator: aSimulator.		]	]! !!Rent methodsFor: 'strategies' stamp: 'PedroRodriguez 5/17/2017 11:37'!aRentStrategy3	" rent the first day 2 rigs and assign to parcel 1"	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 0 ifTrue: [ 			| aRig anotherRig |			aRig := self 				rentRigPower: aSimulator powerOfRigs 		 		cost: aSimulator costOfRentingRigs 				dailyConsumption: aSimulator costOfConsumptionRigs 				forParcel: (anOilfield parcels at: 1)				inOilfield: anOilfield				inSimulator: aSimulator.			anotherRig := self 				rentRigPower: aSimulator powerOfRigs 		 		cost: aSimulator costOfRentingRigs 				dailyConsumption: aSimulator costOfConsumptionRigs 				forParcel: (anOilfield parcels at: 1)				inOilfield: anOilfield				inSimulator: aSimulator.		]	]! !!Rent methodsFor: 'strategies' stamp: 'PedroRodriguez 4/27/2017 15:56'!aRentStrategy2	" rent only the first day a rig and assign it to the parcel number 1"	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 0 ifTrue: [ 			| aRig |			aRig := self 				rentRigPower: aSimulator powerOfRigs 		 		cost: aSimulator costOfRentingRigs 				dailyConsumption: aSimulator costOfConsumptionRigs 				forParcel: (anOilfield parcels at: 1)				inOilfield: anOilfield				inSimulator: aSimulator.		]	]! !!Rent methodsFor: 'strategies' stamp: 'PedroRodriguez 4/30/2017 22:07'!aRentStrategy4	" rent the first day a rig which must pay rent for at least 5 days "	^ [ :anOilfield :aSimulator |		aSimulator daysSimulated = 0 ifTrue: [ 			|aRig |			aRig := self 				rentRigPower: aSimulator powerOfRigs 		 		cost: aSimulator costOfRentingRigs 				dailyConsumption: aSimulator costOfConsumptionRigs 				daysBasicFee: 5   " SET DAYS BASIC FEE = 5 DAYS "				forParcel: (anOilfield parcels at: 1)				inOilfield: anOilfield				inSimulator: aSimulator.		]	]! !!Rent methodsFor: 'strategies' stamp: 'PedroRodriguez 4/27/2017 15:54'!aRentStrategy1	" rent every day a rig for free and assign it to the parcel number 1. check if oilfield has too many rigs before assigning"	^[ :anOilfield :aSimulator |		| aRig |		aRig := self 			rentRigPower: aSimulator powerOfRigs 		 	cost: aSimulator costOfRentingRigs 			dailyConsumption: aSimulator costOfConsumptionRigs 			forParcel: (anOilfield parcels at: 1)			inOilfield: anOilfield			inSimulator: aSimulator.	]! !!Rent methodsFor: 'strategies' stamp: 'PedroRodriguez 4/30/2017 21:39'!aRentStrategy5	" rent every day a rig for free and assign it to the parcel number 1. check if oilfield has too many rigs before assigning"	^[ :anOilfield :aSimulator |		aSimulator daysSimulated <= 4 ifTrue: [ 			| aRig |			aRig := self 				rentRigPower: aSimulator powerOfRigs 		 		cost: aSimulator costOfRentingRigs 				dailyConsumption: aSimulator costOfConsumptionRigs 				forParcel: (anOilfield parcels at: aSimulator daysSimulated + 1)				inOilfield: anOilfield				inSimulator: aSimulator.		]	]! !Strategy subclass: #Sell	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Sell commentStamp: '<historical>' prior: 0!I have the responsibility of selling petroleum and gas!Object subclass: #Terrain	instanceVariableNames: 'resistence'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Terrain commentStamp: '<historical>' prior: 0!I am a terrain, which has certain resistence to being digged!!Terrain methodsFor: 'checking' stamp: 'PedroRodriguez 5/5/2017 11:10'!checkPercentageOk: aPercentage	(aPercentage between: 0 and: 1) ifFalse: [ ^(Error signal: 'resistence must be a percentage') ].! !!Terrain methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/5/2017 11:10'!resistence: aPercentage	"comment stating purpose of message"	self checkPercentageOk: aPercentage.	resistence := aPercentage.! !!Terrain methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 23:29'!resistence	"comment stating purpose of message"	^resistence! !Terrain subclass: #Clay	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Clay commentStamp: '<historical>' prior: 0!I am clay. I dont have much resistance to being dug!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Clay class	instanceVariableNames: ''!!Clay class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 23:24'!new	"comment stating purpose of message"	^super new resistence: 0.3! !Terrain subclass: #Rocky	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Rocky commentStamp: '<historical>' prior: 0!I'm a rocky terrain... i have a lot of resistance to being dug.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Rocky class	instanceVariableNames: ''!!Rocky class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/13/2017 23:26'!new	"comment stating purpose of message"	^super new resistence: 0.6! !TestCase subclass: #TestsOilfield	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!TestsOilfield commentStamp: '<historical>' prior: 0!I take care of testing the dynamics of an oilfield!!TestsOilfield methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:32'!test04InitializeOilfieldPercentagesOk	"comment stating purpose of message"	| anOilfield parcels clay aRig aWell |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	aRig := Rig power: 10 costRent: 0 costDailyConsumption: 0 toParcel: (parcels at: 1) daysBasicFee: 0 forOilfield: anOilfield.	aWell := Well 		initializeOn: (parcels at: 1)		withName: 'well1'.	aRig assignWell: aWell.	aRig dig.		self shouldnt: [ anOilfield. ] raise: Error.! !!TestsOilfield methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:35'!test06PotentialVolumeToExtractIsZero	"comment stating purpose of message"	| anOilfield |	anOilfield := Oilfield		createWithVolume: 50		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.		self should: [ anOilfield extractProduct: 100 ] raise: Error.! !!TestsOilfield methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:31'!test03InitializeOilfieldPercentagesNotOk	"comment stating purpose of message"	self should: [ Oilfield		createWithVolume: 100		withPetrol: 0.3		withWater: 0.3		withGas: 0.5		withMoney: 100.	] raise: Error.! !!TestsOilfield methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:30'!test02ActivationAndDesactivationOfRigsAfterDigging	"comment stating purpose of message"	| anOilfield parcels clay aRig aWell anotherRig anotherWell |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield );		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield ).	aRig := Rig power: 142 costRent: 0 costDailyConsumption: 0 toParcel: (parcels at: 1) daysBasicFee: 0 forOilfield: anOilfield.	anotherRig := Rig power: 143 costRent: 0 costDailyConsumption: 0 toParcel: (parcels at: 2) 						   daysBasicFee: 0 forOilfield: anOilfield.	aWell := Well 		initializeOn: (parcels at: 1)		withName: 'well1'.	anotherWell := Well 		initializeOn: (parcels at: 2)		withName: 'well2'.	aRig assignWell: aWell.	anotherRig assignWell: anotherWell.	aRig dig. 	anotherRig dig.		self should: [ aRig isActive ].	self should: [ anotherRig isActive not ].! !!TestsOilfield methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:33'!test05InitializeOilfieldTypical	"comment stating purpose of message"	| anOilfield parcels clay aRig aWell |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	aRig := Rig power: 10 costRent: 0 costDailyConsumption: 0 toParcel: (parcels at: 1) daysBasicFee: 0 forOilfield: anOilfield.	aWell := Well 		initializeOn: (parcels at: 1)		withName: 'well1'.	aRig assignWell: aWell.	aRig dig.		self shouldnt: [ anOilfield. ] raise: Error.! !!TestsOilfield methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:23'!test01AssignOneRigToOneWellAndDig	"comment stating purpose of message"	| anOilfield parcels clay aRig aWell oneAssignation |	clay := Clay new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels := Dictionary new.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	aRig := Rig power: 10 costRent: 0 costDailyConsumption: 0 toParcel: (parcels at: 1) daysBasicFee: 0 forOilfield: anOilfield.	aWell := Well 		initializeOn: (parcels at: 1)		withName: 'well1'.	oneAssignation := aRig assignWell: aWell.	aRig dig.		self shouldnt: [ oneAssignation ] raise: Error.	self should: [ aRig isActive ].	self should: [ (parcels at: 1) well depth = 7 ].	self should: [ (anOilfield parcels at: 1) rigs size == 1 ].! !TestCase subclass: #TestsSimulator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!TestsSimulator methodsFor: 'accessing' stamp: 'sfernandezledesma 6/3/2017 12:51'!test11RentingAndUsingRigsForOneDayOk	" "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy2; 		at: 2 put: Rent new aRentStrategy1;	"every day rent a new rig"		at: 3 put: Dig new aDigStrategy1.	"every day dig the parcel 1 with all the possible rigs"			anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 2.	"2 days => 1:[1rig, 7metres], 2:[2rig, 14metres] => 7+14=21"			aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 10 		desiredAmountOfWells: 10 		costOfRentingRigs: 0		powerOfRigs: 10		costOfConsumptionRigs: 0		costOfProcessingPlants: 50 		costOfAlmacenationTanks: 25.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		aNewSimulation. "this line should not return error"	self assert: (anOilfield parcels at: 1) well depth = 21.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 13:00'!test20ReinyectInMoreThanOneWell	"  "		| aTerrain parcels aCondition anOilfield anOilfieldOutline aSimulator actions |	aTerrain := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 10000		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: aTerrain inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: aTerrain inOilfield: anOilfield).	actions := Array new: 5.	actions 		at: 1 put: Build new aBuildStrategy4;		at: 2 put: Rent new aRentStrategy6;		at: 3 put: Dig new aDigStrategy2;		at: 4 put: Extract new extractStrategy2;		at: 5 put: Reinject new reinyectStrategy5.	anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnPercentageOfPetrol new minThreshold: 0.10.	aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 2		desiredAmountOfWells: 1		costOfRentingRigs: 0		powerOfRigs: 50		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.					aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: (		(anOilfield percentageOfPetrol between: 0.09 and: 0.10) and: 		aSimulator daysSimulated = 9	).		! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:58'!test15ExtractionAndAlmacenationWith1Well1PP2T	" "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 10000		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: clay inOilfield: anOilfield).	actions := Array new: 4.	actions		at: 1 put: Build new aBuildStrategy3; 			" build two Wells on parcels 1 and 2 the first day and an almacenation tank and a processing plant "		at: 2 put: Rent new aRentStrategy2;				" the first day rent a rig (pay 0 min days of rent) and assign it to the well in parcel 1 "		at: 3 put: Dig new aDigStrategy1;				" dig just the first day the parcel number 1 with all the rigs present in the parcel "		at: 4 put: Extract new extractStrategy2. 			"the second and third day, activate every Well and extract the max potential volume "	anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 4. " simulate 4 days "		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 2		desiredAmountOfWells: 1		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 100 " power of the rig is of 100 metres/day => deactivates after the second day digging (parcel = 100 mts) "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.					aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: anOilfield gasTanks first gas = 100.	self assert: anOilfield waterTanks first water = 60.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:53'!test13ActivatingWellWithoutWaitingOneDay	"  "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	actions := Array new: 4.	actions		at: 1 put: Build new aBuildStrategy2; " build a Well on parcel number 1 the first day "		at: 2 put: Rent new aRentStrategy2;	" the first day rent a rig (pay 0 min days of rent) and assign it to the well in parcel 1 "		at: 3 put: Dig new aDigStrategy3;	" dig just the first day the parcel number 1 with all the rigs present in the parcel "		at: 4 put: Extract new extractStrategy5. "the second day, activate every Well and extract all the volume available "	anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 10. " simulate 10 days "		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 1		desiredAmountOfWells: 1		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 200 " the power of the rig is of 200 metres/day => deactivates after the first day digging "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.			self should: [ aSimulator run: anOilfield until: aCondition with: anOilfieldOutline ] raise: Error.		! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:50'!test09BuildOnePerParcelUntilDesiredAmount	" TODO: without considering the consumption of the rig. Only considering the daily renting fee "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	actions := Array new: 1.	actions		at: 1 put: Build new aBuildStrategy5.			anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 5. " simulate 5 days "		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 10 		desiredAmountOfWells: 1		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 10 " the power of each rig is of 10 metres/day "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: aNewSimulation daysSimulated = 5.	self assert: anOilfield numberOfWells = 1.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:41'!test02EndConditionOnTotalMoneyLeftOk	" "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	actions := Array new: 1.	actions		at: 1 put: Build new aBuildStrategy1.			anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnTotalMoneyLeft new minimumTotalMoneyLeft: 5.		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 10 		desiredAmountOfWells: 10 		costOfRentingRigs: 0		powerOfRigs: 10		costOfConsumptionRigs: 0		costOfProcessingPlants: 50 		costOfAlmacenationTanks: 25.	" 1 WAT, 1 GAT "	aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: aSimulator daysSimulated equals: 1.	self assert: anOilfield balanceSheet totalMoney equals: 0.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:39'!test01EndConditionOnNumberOfSimulatedDaysOk	" "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	actions := Array new: 1.	actions		at: 1 put: Build new aBuildStrategy1. " BuildStrategy2: build only 1 processingPlant and 1 almacenationTank "			anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 5.		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 10 		desiredAmountOfWells: 10 		costOfRentingRigs: 0		powerOfRigs: 10		costOfConsumptionRigs: 0		costOfProcessingPlants: 50 		costOfAlmacenationTanks: 25.	aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: aSimulator daysSimulated equals: 5.	self assert: anOilfield balanceSheet totalMoney equals: 0.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:42'!test03RentingAndUsingOneRigForMoreThanOneDayOk	" "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy2; 		at: 2 put: Rent new aRentStrategy2;	 " only the first day rent one new rig"		at: 3 put: Dig new aDigStrategy1.	"every day dig with all the rigs possible the well in parcel 1"			anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 4.		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 10 		desiredAmountOfWells: 10 		costOfRentingRigs: 0		powerOfRigs: 10		costOfConsumptionRigs: 0		costOfProcessingPlants: 50 		costOfAlmacenationTanks: 25.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self shouldnt: [ aNewSimulation ] raise: Error.	self assert: (anOilfield parcels at: 1) well depth = 28.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:48'!test05RentingAndUsingOneRigForOneDayOk	" "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy2; 		at: 2 put: Rent new aRentStrategy2;	"only the first day rent a rig"		at: 3 put: Dig new aDigStrategy4.	"only the first day dig the well in parcel 1"			anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 5.		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 10 		desiredAmountOfWells: 10 		costOfRentingRigs: 0		powerOfRigs: 10		costOfConsumptionRigs: 0		costOfProcessingPlants: 50 		costOfAlmacenationTanks: 25.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self shouldnt: [ aNewSimulation ] raise: Error.	self assert: (anOilfield parcels at: 1) well depth = 7.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:47'!test04ActivatingDeactivatingRigsAndPayingFee	" the rig finishes digging the first day, but we must keep paying the minimum fee for some more days "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy2; " build a Well on parcel number 1 the first day "		at: 2 put: Rent new aRentStrategy4;	" the first day rent a rig and assign it to parcel 1 . pay minimum 5 days "		at: 3 put: Dig new aDigStrategy1.	" dig just the first day the parcel number 1 with all the rigs present in the parcel "			anOilfieldOutline := OilfieldOutline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 10. " simulate 10 days "		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 10 		desiredAmountOfWells: 1		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 200 " the power of the rig is of 200 metres/day => deactivates after the first day digging "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: aNewSimulation daysSimulated = 10.	self assert: anOilfield numberOfWells = 1.	self assert: anOilfield numberOfActiveRigs = 0.	self assert: anOilfield balanceSheet totalMoney = 50.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:57'!test14ExtractionLimitedByProcessingPlantWithTwoWellsExceedingMaxSimultaneousRigs	" "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 10000		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 3000 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 100 pressure: 3000 terrain: clay inOilfield: anOilfield).	anOilfieldOutline := OilfieldOutline createWithBuildStrategy: Build new aBuildStrategy4 RentStrategy: Rent new aRentStrategy3 DigStrategy: Dig new aDigStrategy2 ReinjectStrategy: Reinject new noStrategy SellStrategy: Sell new noStrategy ExtractStrategy: Extract new extractStrategy2.		aCondition := ConditionOnDays new maximumDays: 4. " simulate 4 days "		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 1		desiredAmountOfWells: 1		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 100 " power of the rig is of 200 metres/day => deactivates after the first day digging (parcel = 100 mts) "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.			self should: [ aSimulator run: anOilfield until: aCondition with: anOilfieldOutline ] raise: Error.		! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:49'!test07RentingOneRigUntilMoneyIsOverBis	" TODO: without considering the consumption of the rig. Only considering the daily renting fee "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy2; 		at: 2 put: Rent new aRentStrategy2;	" only the first day rent one new rig"		at: 3 put: Dig new aDigStrategy1.	" every day dig with all the rigs possible the well in parcel 1"			anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnTotalMoneyLeft new minimumTotalMoneyLeft: 55. " enough money to rent 1 rig 5 days "		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 10 		desiredAmountOfWells: 10 		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 10 		" the power of each rig is of 10 metres/day "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: aNewSimulation daysSimulated == 5.	self assert: anOilfield balanceSheet totalMoney == 50.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 13:00'!test17PayConsumptionOfFuelInRigs	"  "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 10000		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: clay inOilfield: anOilfield);		at: 3 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: clay inOilfield: anOilfield);		at: 4 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: clay inOilfield: anOilfield);		at: 5 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: clay inOilfield: anOilfield);		at: 6 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: clay inOilfield: anOilfield).	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy6; 			" until reaching desiredAmountOfWells, each day create a new well (days 1,2,3,4,5..)"		at: 2 put: Rent new aRentStrategy5;				" each day rent a rig (pay 0 min days of rent) and assign it to the well in parcel 'daysSimulated + 1'"		at: 3 put: Dig new aDigStrategy5.			" every day, if the rig is active, dig in the parcel it has assigned "	anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 10. " simulate 10 days - enough to dig 5 wells"		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 1		desiredAmountOfWells: 5		costOfRentingRigs: 0 " each rig costs 10 dollars each day "		powerOfRigs: 200 " power of the rig is of 200 metres/day => deactivates after the first day digging (parcel = 50 mts) "		costOfConsumptionRigs: 10		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.					aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: anOilfield numberOfWells = 5.	self assert: anOilfield balanceSheet totalMoney = 50.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/17/2017 11:48'!test21UpdatePressureAfterReinyection	"  "		self fail.	! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:51'!test10Building1WellPerParcelUntilDesiredAmount	" TODO: without considering the consumption of the rig. Only considering the daily renting fee "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	actions := Array new: 1.	actions		at: 1 put: Build new aBuildStrategy5.			anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 5. " simulate 5 days "		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 10 		desiredAmountOfWells: 1		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 10 " the power of each rig is of 10 metres/day "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: aNewSimulation daysSimulated = 5.	self assert: anOilfield numberOfWells = 1.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 13:00'!test19CannotReinjectIfAnExtractionHappenedThatDay	" "		| aTerrain parcels aCondition anOilfield anOilfieldOutline aSimulator actions |	aTerrain := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 10000		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: aTerrain inOilfield: anOilfield).	actions := Array new: 5.	actions 		at: 1 put: Build new aBuildStrategy2;		at: 2 put: Rent new aRentStrategy2;		at: 3 put: Dig new aDigStrategy1;		at: 4 put: Extract new extractStrategy2;		at: 5 put: Reinject new reinyectStrategy2.	anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnPercentageOfPetrol new minThreshold: 0.10.	aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 1		desiredAmountOfWells: 1		costOfRentingRigs: 0		powerOfRigs: 50		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.					self should: [aSimulator run: anOilfield until: aCondition with: anOilfieldOutline]	     raise: Error 		  description: 'cannot reinject if there was an extraction from some well that day'.		! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/17/2017 11:49'!test22CantReinyectMoreThanGlobalAmountExtracted	"  "		self fail.	! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 13:01'!test23CannotExtractIfAReinjectionHappenedThatDay	"comment stating purpose of message"	| aTerrain parcels aCondition anOilfield anOilfieldOutline aSimulator |	aTerrain := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 10000		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: aTerrain inOilfield: anOilfield).	anOilfieldOutline  := OilfieldOutline createWithBuildStrategy: Build new aBuildStrategy2 RentStrategy: Rent new aRentStrategy2 DigStrategy: Dig new aDigStrategy1 ReinjectStrategy: Reinject new reinyectStrategy2 SellStrategy: Sell new noStrategy ExtractStrategy: Extract new extractStrategy2.	aCondition := ConditionOnPercentageOfPetrol new minThreshold: 0.10.	aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 1		desiredAmountOfWells: 1		costOfRentingRigs: 0		powerOfRigs: 50		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.					self should: [aSimulator run: anOilfield until: aCondition with: anOilfieldOutline]	     raise: Error! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:49'!test06RentingOneRigUntilMoneyIsOver	" TODO: without considering the consumption of the rig. Only considering the daily renting fee "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy2; 		at: 2 put: Rent new aRentStrategy2;	"only the first day rent one new rig"		at: 3 put: Dig new aDigStrategy1.	"every day dig with all the rigs possible the well in parcel 1"			anOilfieldOutline := OilfieldOutline createWith: actions.	aCondition := ConditionOnTotalMoneyLeft new minimumTotalMoneyLeft: 120. "not enough money left to start the simulation "		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 10 		desiredAmountOfWells: 10 		costOfRentingRigs: 10		powerOfRigs: 10		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: aNewSimulation daysSimulated = 0.	self assert: anOilfield balanceSheet totalMoney = 100.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:50'!test08BuildDoNothing	" TODO: without considering the consumption of the rig. Only considering the daily renting fee "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions aNewSimulation |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	actions := Array new: 1.	actions		at: 1 put: Build new noStrategy.			anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 5. " simulate 5 days "		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 10 		desiredAmountOfWells: 1		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 10 " the power of each rig is of 10 metres/day "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.	aNewSimulation := aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: 1=1.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:52'!test12TooManyActiveRigs	" the rig finishes digging the first day, but we must keep paying the minimum fee for some more days "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 100		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 100 pressure: 5 terrain: clay inOilfield: anOilfield).	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy2; " build a Well on parcel number 1 the first day "		at: 2 put: Rent new aRentStrategy4;	" the first day rent a rig (pay 5 min days of rent) and assign it to the well in parcel 1 "		at: 3 put: Dig new aDigStrategy3.	" dig just the first day the parcel number 1 with all the rigs present in the parcel "	anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 10. " simulate 10 days "		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 0 " maximum: 0 rigs => return error if want to dig a well with a rig "		desiredAmountOfWells: 1		costOfRentingRigs: 10 " each rig costs 10 dollars each day "		powerOfRigs: 200 " the power of the rig is of 200 metres/day => deactivates after the first day digging "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.			self should: [ aSimulator run: anOilfield until: aCondition with: anOilfieldOutline ] raise: Error.		! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 12:58'!test16BuildMaximumDesiredNumberOfWellsWith1Rig	" "		| parcels aCondition anOilfield anOilfieldOutline aSimulator clay actions |	clay := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 10000		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 1e9.	" a lot of money - infinite here - "	parcels		at: 1 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: clay inOilfield: anOilfield);		at: 2 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: clay inOilfield: anOilfield);		at: 3 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: clay inOilfield: anOilfield);		at: 4 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: clay inOilfield: anOilfield);		at: 5 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: clay inOilfield: anOilfield);		at: 6 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: clay inOilfield: anOilfield).	actions := Array new: 3.	actions		at: 1 put: Build new aBuildStrategy6; 			" until reaching desiredAmountOfWells, each day create a new well (days 1,2,3,4,5..)"		at: 2 put: Rent new aRentStrategy5;				" each day rent a rig (pay 0 min days of rent) and assign it to the well in parcel 'daysSimulated + 1'"		at: 3 put: Dig new aDigStrategy5.			" every day, if the rig is active, dig in the parcel it has assigned "	anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnDays new maximumDays: 10. " simulate 10 days - enough to dig 5 wells"		aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 1		desiredAmountOfWells: 5		costOfRentingRigs: 0 " each rig costs 10 dollars each day "		powerOfRigs: 200 " power of the rig is of 200 metres/day => deactivates after the first day digging (parcel = 50 mts) "		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.					aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: anOilfield numberOfWells = 5.! !!TestsSimulator methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 13:00'!test18CheckPercentageOfPetrolEndingCondition	" "		| aTerrain parcels aCondition anOilfield anOilfieldOutline aSimulator actions |	aTerrain := Clay new.	parcels := Dictionary new.	anOilfield := Oilfield		createWithVolume: 10000		withPetrol: 0.2		withWater: 0.3		withGas: 0.5		withMoney: 100.	parcels		at: 1 put: (Parcel createWithDepth: 50 pressure: 3000 terrain: aTerrain inOilfield: anOilfield).	actions := Array new: 5.	actions 		at: 1 put: Build new aBuildStrategy2;		at: 2 put: Rent new aRentStrategy2;		at: 3 put: Dig new aDigStrategy1;		at: 4 put: Extract new extractStrategy2;		at: 5 put: Reinject new reinyectStrategy3.	anOilfieldOutline  := OilfieldOutline createWith: actions.	aCondition := ConditionOnPercentageOfPetrol new minThreshold: 0.10.	aSimulator := Simulator 		initializeWithMaxSimultaneousRigs: 1		desiredAmountOfWells: 1		costOfRentingRigs: 0		powerOfRigs: 50		costOfConsumptionRigs: 0		costOfProcessingPlants: 0 		costOfAlmacenationTanks: 0.					aSimulator run: anOilfield until: aCondition with: anOilfieldOutline.		self assert: anOilfield percentageOfPetrol < 0.10.! !StorageTank subclass: #WaterTank	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!WaterTank commentStamp: '<historical>' prior: 0!Hi!! i am a water AT!!WaterTank methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 15:33'!description	"comment stating purpose of message"	^'Water Tank'! !!WaterTank methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/5/2017 12:06'!water	^totalProduct! !!WaterTank methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/2/2017 15:00'!storeWater: aNumberOfCubicMetres	"comment stating purpose of message"	self addVolume: aNumberOfCubicMetres.! !OilfieldElement subclass: #Well	instanceVariableNames: 'depth parcel isOpen daysSinceFinished name processingPlants'	classVariableNames: ''	poolDictionaries: ''	category: 'TP2-ING'!!Well commentStamp: '<historical>' prior: 0!I am a Well. I can be dug by Rigs working in a parcel of an oilfield!!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/15/2017 21:32'!deactivate	"comment stating purpose of message"	isActive := false.! !!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/21/2017 14:34'!selectProcessingPlantsForExtracting: aNumberOfCubicMetresToExtract		"return the PPs that has some capacity left"		self checkProcessingPlantsNotEmpty.	self checkForBuiltProcessingPlants.	self checkCapabilityToProcess: aNumberOfCubicMetresToExtract.			^(processingPlants select: [ :each | each capacity > 0 ]).! !!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/30/2017 21:24'!digWith: aRig	" the depth that can be dug depends on the rig and on the terrain of the parcel corresponding to the well "	| maxToDig depthDug |	maxToDig := aRig power * (1 - self parcel terrain resistence).	depthDug := maxToDig min: self parcel depth - self depth.	depth := depth + depthDug.	" deactivate the rig when it finishes digging "	depth = self parcel depth ifTrue: [ 		aRig deactivate.	].! !!Well methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 5/30/2017 18:36'!maxProcessingCapability	"comment stating purpose of message"	| maximumProcessingCapability builtProcessingPlants maximumAlmacenationCapacity |	maximumProcessingCapability := 0.	maximumAlmacenationCapacity := 0.	builtProcessingPlants := processingPlants select: [ :each | each isAlreadyBuilt ].		" maximumProcessingCapability without considering the case where two PPs connect to the same almacenation tank "	builtProcessingPlants do: [ :eachPP | 		maximumProcessingCapability := maximumProcessingCapability + eachPP capacity.		eachPP tanks do: [ :eachAT |			maximumAlmacenationCapacity := maximumAlmacenationCapacity + eachAT capacity		]	].	" check the maximum capacity of all the almacenation tanks connected to these processing plants "			^(maximumProcessingCapability min: maximumAlmacenationCapacity)! !!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/5/2017 12:18'!activate	"comment stating purpose of message"	depth < parcel depth ifTrue: [ ^(Error signal: 'cant activate Well until after reaching bottom') ].	self checkDepth.	self checkDaysSinceFinished.	isOpen := true.! !!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 4/16/2017 17:05'!advanceOneDay	" the depth that can be dug depends on the rig and on the terrain of the parcel corresponding to the well "	depth = self parcel depth ifTrue: [ 		daysSinceFinished := daysSinceFinished + 1	].! !!Well methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/5/2017 11:05'!sendToProcessingPlants: aNumberOfCubicMetres withPercentages: anArrayOfPercentagesWGP	" must check if between all the processing plants that are already built, they can process the desired amount of product "		| availableProcessingPlants i cubicMetresLeft |		" get all the PPs that still have some capacity left "	availableProcessingPlants := self selectProcessingPlantsForExtracting: aNumberOfCubicMetres.			" Use every possible processing plant in order to process the product "	i := 1.	cubicMetresLeft := aNumberOfCubicMetres.	[ cubicMetresLeft > 0] whileTrue: [ 		| capacityOfPP |		capacityOfPP := (availableProcessingPlants at: i) capacity.		(availableProcessingPlants at: i) process: capacityOfPP withPercentages: anArrayOfPercentagesWGP.		cubicMetresLeft := cubicMetresLeft - capacityOfPP.		i := i + 1.	].! !!Well methodsFor: 'as yet unclassified' stamp: 'sfernandezledesma 6/3/2017 15:09'!reinjectWater: aNumberOfLitresOfWater	oilfield reinjectWater: aNumberOfLitresOfWater.	oilfield logEvent: aNumberOfLitresOfWater asString, ' cubic metres of water were reinjected to Well ', self name asString.! !!Well methodsFor: 'private' stamp: 'sfernandezledesma 6/3/2017 13:05'!initializeOn: aParcel withName: aName withProcessingPlant: aProcessingPlant	"comment stating purpose of message"	depth := 0.	isOpen := false.	aParcel initializeWell: self.	parcel := aParcel.	daysSinceFinished := 0.	name := aName.	processingPlants := OrderedCollection new.	processingPlants add: aProcessingPlant.	oilfield := aParcel oilfield.! !!Well methodsFor: 'private' stamp: 'sfernandezledesma 6/3/2017 13:05'!initializeOn: aParcel withName: aName	"comment stating purpose of message"	depth := 0.	isOpen := false.	aParcel initializeWell: self.	parcel := aParcel.	daysSinceFinished := 0.	name := aName.	processingPlants := OrderedCollection new.	oilfield := aParcel oilfield.! !!Well methodsFor: 'checking' stamp: 'PedroRodriguez 5/5/2017 11:07'!checkDaysSinceFinished	"comment stating purpose of message"	daysSinceFinished < 1 ifTrue: [ ^(Error signal: 'cant activate Well until at least 1 day of finishing digging') ].! !!Well methodsFor: 'checking' stamp: 'PedroRodriguez 4/21/2017 13:00'!checkForBuiltProcessingPlants	"comment stating purpose of message"	| builtProcessingPlants |	builtProcessingPlants := processingPlants select: [ :each | each isAlreadyBuilt ].	builtProcessingPlants size > 0 		ifFalse: [ ^(Error signal: 'the well does not have any available processing plant') ].! !!Well methodsFor: 'checking' stamp: 'PedroRodriguez 5/5/2017 11:07'!checkDepth	"comment stating purpose of message"	depth < parcel depth ifTrue: [ ^(Error signal: 'cant activate Well until after reaching bottom') ].! !!Well methodsFor: 'checking' stamp: 'PedroRodriguez 4/21/2017 13:58'!checkCapabilityToProcess: aNumberOfCubicMetresToExtract	"comment stating purpose of message"	self maxProcessingCapability < aNumberOfCubicMetresToExtract		ifTrue: [ ^(Error signal: 'the well doesnt have enough processing capability') ].! !!Well methodsFor: 'checking' stamp: 'PedroRodriguez 4/21/2017 12:53'!checkProcessingPlantsNotEmpty			processingPlants isEmpty 		ifTrue: [ ^(Error signal: 'cant extract product from well because it isnt connected to a processing plant') ].! !!Well methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 23:06'!depth	"comment stating purpose of message"	^depth! !!Well methodsFor: 'accessing' stamp: 'PedroRodriguez 4/13/2017 23:05'!parcel	"comment stating purpose of message"	^parcel! !!Well methodsFor: 'accessing' stamp: 'PedroRodriguez 4/17/2017 14:22'!name	"comment stating purpose of message"	^name! !!Well methodsFor: 'accessing' stamp: 'PedroRodriguez 5/5/2017 12:13'!isOpen	"comment stating purpose of message"	^isOpen! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Well class	instanceVariableNames: 'lastId'!!Well class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/8/2017 13:18'!initializeOn: aParcel withName: anId connectedTo: aProcessingPlant	^self new 		initializeOn: aParcel		withName: anId		withProcessingPlant: aProcessingPlant! !!Well class methodsFor: 'as yet unclassified' stamp: 'PedroRodriguez 5/8/2017 13:18'!initializeOn: aParcel withName: anId	^self new 		initializeOn: aParcel		withName: anId! !